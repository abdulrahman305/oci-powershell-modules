/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20220421
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.AdmService.Requests;
using Oci.AdmService.Responses;
using Oci.AdmService.Models;
using Oci.Common.Model;

namespace Oci.AdmService.Cmdlets
{
    [Cmdlet("Get", "OCIAdmApplicationDependencyVulnerabilitiesList")]
    [OutputType(new System.Type[] { typeof(Oci.AdmService.Models.ApplicationDependencyVulnerabilityCollection), typeof(Oci.AdmService.Responses.ListApplicationDependencyVulnerabilitiesResponse) })]
    public class GetOCIAdmApplicationDependencyVulnerabilitiesList : OCIApplicationDependencyManagementCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Vulnerability Audit identifier path parameter.")]
        public string VulnerabilityAuditId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only Vulnerability Audits that match the specified id.")]
        public string VulnerabilityId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter that returns only Vulnerabilities that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater than or equal to the specified value.")]
        public System.Nullable<float> CvssV3GreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter that returns only Vulnerabilities that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater than or equal to the specified value.")]
        public System.Nullable<float> CvssV2GreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter that returns only Vulnerabilities that have a severity greater than or equal to the specified value.")]
        public System.Nullable<Oci.AdmService.Models.VulnerabilitySeverity> SeverityGreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'ASC' or 'DESC'.")]
        public System.Nullable<Oci.AdmService.Models.SortOrder> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. Only one sort order may be provided. If sort order is dfs, the nodes are returned by going through the application dependency tree in a depth-first manner. Children are sorted based on their GAV property alphabetically (either ascending or descending, depending on the order parameter). Default order is ascending. If sort order is bfs, the nodes are returned by going through the application dependency tree in a breadth-first manner. Children are sorted based on their GAV property alphabetically (either ascending or descending, depending on the order parameter). Default order is ascending. Default order for gav is ascending where ascending corresponds to alphanumerical order. Default order for purl is ascending where ascending corresponds to alphabetical order Default order for nodeId is ascending where ascending corresponds to alphanumerical order. Sorting by DFS or BFS cannot be used in conjunction with the following query parameters: ""gav"", ""cvssV2GreaterThanOrEqual"", ""cvssV3GreaterThanOrEqual"" and ""vulnerabilityId"".")]
        public System.Nullable<Oci.AdmService.Requests.ListApplicationDependencyVulnerabilitiesRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters ""cvssV2GreaterThanOrEqual"", ""cvssV3GreaterThanOrEqual"", ""gav"" and ""vulnerabilityId"" cannot be used in conjunction with this parameter.")]
        public string RootNodeId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as ""cvssV2GreaterThanOrEqual"", ""cvssV3GreaterThanOrEqual"", ""gav"" and ""vulnerabilityId"" can't be used in conjunction with this latter.")]
        public System.Nullable<int> Depth { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.")]
        public string Gav { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the entire PURL given (https://github.com/package-url/purl-spec/).")]
        public string Purl { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListApplicationDependencyVulnerabilitiesRequest request;

            try
            {
                request = new ListApplicationDependencyVulnerabilitiesRequest
                {
                    VulnerabilityAuditId = VulnerabilityAuditId,
                    VulnerabilityId = VulnerabilityId,
                    CvssV3GreaterThanOrEqual = CvssV3GreaterThanOrEqual,
                    CvssV2GreaterThanOrEqual = CvssV2GreaterThanOrEqual,
                    SeverityGreaterThanOrEqual = SeverityGreaterThanOrEqual,
                    Limit = Limit,
                    Page = Page,
                    SortOrder = SortOrder,
                    SortBy = SortBy,
                    RootNodeId = RootNodeId,
                    Depth = Depth,
                    Gav = Gav,
                    Purl = Purl,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListApplicationDependencyVulnerabilitiesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.ApplicationDependencyVulnerabilityCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListApplicationDependencyVulnerabilitiesResponse> DefaultRequest(ListApplicationDependencyVulnerabilitiesRequest request) => Enumerable.Repeat(client.ListApplicationDependencyVulnerabilities(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListApplicationDependencyVulnerabilitiesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListApplicationDependencyVulnerabilitiesResponse response;
        private delegate IEnumerable<ListApplicationDependencyVulnerabilitiesResponse> RequestDelegate(ListApplicationDependencyVulnerabilitiesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
