/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20240501
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.DbmulticloudService.Requests;
using Oci.DbmulticloudService.Responses;
using Oci.DbmulticloudService.Models;
using Oci.Common.Model;

namespace Oci.DbmulticloudService.Cmdlets
{
    [Cmdlet("Get", "OCIDbmulticloudOracleDbAzureVaultAssociationsList")]
    [OutputType(new System.Type[] { typeof(Oci.DbmulticloudService.Models.OracleDbAzureVaultAssociationSummaryCollection), typeof(Oci.DbmulticloudService.Responses.ListOracleDbAzureVaultAssociationsResponse) })]
    public class GetOCIDbmulticloudOracleDbAzureVaultAssociationsList : OCIOracleDbAzureVaultAssociationCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The [ID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return Oracle DB Azure Vault Resources.")]
        public string OracleDbAzureVaultId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return Azure Vault Association.")]
        public string DisplayName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return Oracle DB Azure Vault Association Resources.")]
        public string OracleDbAzureVaultAssociationId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.")]
        public System.Nullable<Oci.DbmulticloudService.Models.OracleDbAzureVaultAssociation.LifecycleStateEnum> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return Oracle DB Azure Blob Mount Resources.")]
        public string OracleDbAzureConnectorId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'asc' or 'desc'.")]
        public System.Nullable<Oci.DbmulticloudService.Models.SortOrder> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending. If no value is specified, default is timeCreated.")]
        public System.Nullable<Oci.DbmulticloudService.Requests.ListOracleDbAzureVaultAssociationsRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListOracleDbAzureVaultAssociationsRequest request;

            try
            {
                request = new ListOracleDbAzureVaultAssociationsRequest
                {
                    CompartmentId = CompartmentId,
                    OracleDbAzureVaultId = OracleDbAzureVaultId,
                    DisplayName = DisplayName,
                    OracleDbAzureVaultAssociationId = OracleDbAzureVaultAssociationId,
                    LifecycleState = LifecycleState,
                    OracleDbAzureConnectorId = OracleDbAzureConnectorId,
                    Limit = Limit,
                    Page = Page,
                    SortOrder = SortOrder,
                    SortBy = SortBy,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListOracleDbAzureVaultAssociationsResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.OracleDbAzureVaultAssociationSummaryCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListOracleDbAzureVaultAssociationsResponse> DefaultRequest(ListOracleDbAzureVaultAssociationsRequest request) => Enumerable.Repeat(client.ListOracleDbAzureVaultAssociations(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListOracleDbAzureVaultAssociationsResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListOracleDbAzureVaultAssociationsResponse response;
        private delegate IEnumerable<ListOracleDbAzureVaultAssociationsResponse> RequestDelegate(ListOracleDbAzureVaultAssociationsRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
