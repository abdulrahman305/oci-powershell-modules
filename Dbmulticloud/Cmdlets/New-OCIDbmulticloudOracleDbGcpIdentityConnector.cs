/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20240501
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.DbmulticloudService.Requests;
using Oci.DbmulticloudService.Responses;
using Oci.DbmulticloudService.Models;
using Oci.Common.Model;

namespace Oci.DbmulticloudService.Cmdlets
{
    [Cmdlet("New", "OCIDbmulticloudOracleDbGcpIdentityConnector")]
    [OutputType(new System.Type[] { typeof(Oci.DbmulticloudService.Models.OracleDbGcpIdentityConnector), typeof(Oci.DbmulticloudService.Responses.CreateOracleDbGcpIdentityConnectorResponse) })]
    public class NewOCIDbmulticloudOracleDbGcpIdentityConnector : OCIDbMulticloudGCPProviderCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Details for to Create Oracle DB GCP  Identity Connector resource.")]
        public CreateOracleDbGcpIdentityConnectorDetails CreateOracleDbGcpIdentityConnectorDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request, allowing it to be safely retried in the event of a timeout or server error without the risk of the action being executed more than once.

Retry tokens expire after 24 hours but can be invalidated sooner if conflicting operations occur.

For example, if a resource has been deleted and permanently purged from the system, a retry of the original creation request may be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            CreateOracleDbGcpIdentityConnectorRequest request;

            try
            {
                request = new CreateOracleDbGcpIdentityConnectorRequest
                {
                    CreateOracleDbGcpIdentityConnectorDetails = CreateOracleDbGcpIdentityConnectorDetails,
                    OpcRetryToken = OpcRetryToken,
                    OpcRequestId = OpcRequestId
                };

                response = client.CreateOracleDbGcpIdentityConnector(request).GetAwaiter().GetResult();
                WriteOutput(response, response.OracleDbGcpIdentityConnector);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private CreateOracleDbGcpIdentityConnectorResponse response;
    }
}
