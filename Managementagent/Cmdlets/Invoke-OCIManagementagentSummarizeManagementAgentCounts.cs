/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20200202
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.ManagementagentService.Requests;
using Oci.ManagementagentService.Responses;
using Oci.ManagementagentService.Models;
using Oci.Common.Model;

namespace Oci.ManagementagentService.Cmdlets
{
    [Cmdlet("Invoke", "OCIManagementagentSummarizeManagementAgentCounts")]
    [OutputType(new System.Type[] { typeof(Oci.ManagementagentService.Models.ManagementAgentAggregationCollection), typeof(Oci.ManagementagentService.Responses.SummarizeManagementAgentCountsResponse) })]
    public class InvokeOCIManagementagentSummarizeManagementAgentCounts : OCIManagementAgentCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the compartment to which a request will be scoped.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field by which to group Management Agents. Currently, only one groupBy dimension is supported at a time.")]
        public System.Collections.Generic.List<Oci.ManagementagentService.Models.ManagementAgentGroupBy> GroupBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"When set to true then agents that have at least one plugin deployed will be returned. When set to false only agents that have no plugins deployed will be returned.")]
        public System.Nullable<bool> HasPlugins { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.")]
        public System.Nullable<Oci.ManagementagentService.Models.InstallTypes> InstallType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.")]
        public System.Nullable<bool> CompartmentIdInSubtree { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            SummarizeManagementAgentCountsRequest request;

            try
            {
                request = new SummarizeManagementAgentCountsRequest
                {
                    CompartmentId = CompartmentId,
                    GroupBy = GroupBy,
                    HasPlugins = HasPlugins,
                    InstallType = InstallType,
                    CompartmentIdInSubtree = CompartmentIdInSubtree,
                    Page = Page,
                    OpcRequestId = OpcRequestId
                };

                response = client.SummarizeManagementAgentCounts(request).GetAwaiter().GetResult();
                WriteOutput(response, response.ManagementAgentAggregationCollection);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private SummarizeManagementAgentCountsResponse response;
    }
}
