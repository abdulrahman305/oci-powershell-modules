/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20220901
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.ThreatintelligenceService.Requests;
using Oci.ThreatintelligenceService.Responses;
using Oci.ThreatintelligenceService.Models;
using Oci.Common.Model;

namespace Oci.ThreatintelligenceService.Cmdlets
{
    [Cmdlet("Invoke", "OCIThreatintelligenceSummarizeIndicators")]
    [OutputType(new System.Type[] { typeof(Oci.ThreatintelligenceService.Models.IndicatorSummaryCollection), typeof(Oci.ThreatintelligenceService.Responses.SummarizeIndicatorsResponse) })]
    public class InvokeOCIThreatintelligenceSummarizeIndicators : OCIThreatintelCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the tenancy (root compartment) that is used to filter results.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Query Parameters to search for indicators.")]
        public SummarizeIndicatorsDetails SummarizeIndicatorsDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.")]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.")]
        public string Page { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            SummarizeIndicatorsRequest request;

            try
            {
                request = new SummarizeIndicatorsRequest
                {
                    CompartmentId = CompartmentId,
                    SummarizeIndicatorsDetails = SummarizeIndicatorsDetails,
                    OpcRequestId = OpcRequestId,
                    Limit = Limit,
                    Page = Page
                };

                response = client.SummarizeIndicators(request).GetAwaiter().GetResult();
                WriteOutput(response, response.IndicatorSummaryCollection);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private SummarizeIndicatorsResponse response;
    }
}
