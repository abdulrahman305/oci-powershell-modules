/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20220509
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.CloudbridgeService.Requests;
using Oci.CloudbridgeService.Responses;
using Oci.CloudbridgeService.Models;
using Oci.Common.Model;

namespace Oci.CloudbridgeService.Cmdlets
{
    [Cmdlet("Invoke", "OCICloudbridgeAnalyzeAssets")]
    [OutputType(new System.Type[] { typeof(Oci.CloudbridgeService.Models.AssetAggregationCollection), typeof(Oci.CloudbridgeService.Responses.AnalyzeAssetsResponse) })]
    public class InvokeOCICloudbridgeAnalyzeAssets : OCIInventoryCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The ID of the compartment in which to list resources.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"An array of properties on which to aggregate.")]
        public System.Collections.Generic.List<string> AggregationProperties { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.")]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only assets whose lifecycleState matches the given lifecycleState.")]
        public System.Nullable<Oci.CloudbridgeService.Models.Asset.LifecycleStateEnum> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Source key from where the assets originate.")]
        public string SourceKey { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"External asset key.")]
        public string ExternalAssetKey { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The type of asset.")]
        public System.Nullable<Oci.CloudbridgeService.Models.AssetType> AssetType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'ASC' or 'DESC'.")]
        public System.Nullable<Oci.CloudbridgeService.Models.SortOrders> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The dimensions in which to group the aggregations.")]
        public System.Collections.Generic.List<string> GroupBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Inventory identifier.")]
        public string InventoryId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            AnalyzeAssetsRequest request;

            try
            {
                request = new AnalyzeAssetsRequest
                {
                    CompartmentId = CompartmentId,
                    AggregationProperties = AggregationProperties,
                    Limit = Limit,
                    Page = Page,
                    LifecycleState = LifecycleState,
                    SourceKey = SourceKey,
                    ExternalAssetKey = ExternalAssetKey,
                    AssetType = AssetType,
                    SortOrder = SortOrder,
                    OpcRequestId = OpcRequestId,
                    GroupBy = GroupBy,
                    InventoryId = InventoryId
                };

                response = client.AnalyzeAssets(request).GetAwaiter().GetResult();
                WriteOutput(response, response.AssetAggregationCollection);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private AnalyzeAssetsResponse response;
    }
}
