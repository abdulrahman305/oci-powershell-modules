/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20160918
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.ObjectstorageService.Requests;
using Oci.ObjectstorageService.Responses;
using Oci.ObjectstorageService.Models;
using Oci.Common.Model;

namespace Oci.ObjectstorageService.Cmdlets
{
    [Cmdlet("Write", "OCIObjectstorageObjectLifecyclePolicy")]
    [OutputType(new System.Type[] { typeof(Oci.ObjectstorageService.Models.ObjectLifecyclePolicy), typeof(Oci.ObjectstorageService.Responses.PutObjectLifecyclePolicyResponse) })]
    public class WriteOCIObjectstorageObjectLifecyclePolicy : OCIObjectStorageCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Object Storage namespace used for the request.")]
        public string NamespaceName { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`")]
        public string BucketName { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The lifecycle policy to apply to the bucket.")]
        public PutObjectLifecyclePolicyDetails PutObjectLifecyclePolicyDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcClientRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The entity tag (ETag) to match with the ETag of an existing resource. If the specified ETag matches the ETag of the existing resource, GET and HEAD requests will return the resource and PUT and POST requests will upload the resource.")]
        public string IfMatch { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The entity tag (ETag) to avoid matching. The only valid value is '*', which indicates that the request should fail if the resource already exists.")]
        public string IfNoneMatch { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            PutObjectLifecyclePolicyRequest request;

            try
            {
                request = new PutObjectLifecyclePolicyRequest
                {
                    NamespaceName = NamespaceName,
                    BucketName = BucketName,
                    PutObjectLifecyclePolicyDetails = PutObjectLifecyclePolicyDetails,
                    OpcClientRequestId = OpcClientRequestId,
                    IfMatch = IfMatch,
                    IfNoneMatch = IfNoneMatch
                };

                response = client.PutObjectLifecyclePolicy(request).GetAwaiter().GetResult();
                WriteOutput(response, response.ObjectLifecyclePolicy);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private PutObjectLifecyclePolicyResponse response;
    }
}
