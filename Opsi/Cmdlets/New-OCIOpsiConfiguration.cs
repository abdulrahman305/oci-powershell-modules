/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20200630
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.OpsiService.Requests;
using Oci.OpsiService.Responses;
using Oci.OpsiService.Models;
using Oci.Common.Model;

namespace Oci.OpsiService.Cmdlets
{
    [Cmdlet("New", "OCIOpsiConfiguration")]
    [OutputType(new System.Type[] { typeof(Oci.OpsiService.Models.OpsiConfiguration), typeof(Oci.OpsiService.Responses.CreateOpsiConfigurationResponse) })]
    public class NewOCIOpsiConfiguration : OCIOperationsInsightsCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Information about OPSI configuration resource to be created. This parameter also accepts subtype <Oci.OpsiService.Models.CreateOpsiUxConfigurationDetails> of type <Oci.OpsiService.Models.CreateOpsiConfigurationDetails>.")]
        public CreateOpsiConfigurationDetails CreateOpsiConfigurationDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request that can be retried in case of a timeout or server error without risk of executing the same action again. Retry tokens expire after 24 hours.

*Note:* Retry tokens can be invalidated before the 24 hour time limit due to conflicting operations, such as a resource being deleted or purged from the system.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Optional fields to return as part of OpsiConfiguration object. Unless requested, these fields will not be returned by default.")]
        public System.Collections.Generic.List<Oci.OpsiService.Requests.CreateOpsiConfigurationRequest.OpsiConfigFieldEnum> OpsiConfigField { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Specifies whether only customized configuration items or only non-customized configuration items or both have to be returned. By default only customized configuration items are returned.")]
        public System.Collections.Generic.List<Oci.OpsiService.Requests.CreateOpsiConfigurationRequest.ConfigItemCustomStatusEnum> ConfigItemCustomStatus { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Returns the configuration items filtered by applicable contexts sent in this param. By default configuration items of all applicable contexts are returned.")]
        public System.Collections.Generic.List<string> ConfigItemsApplicableContext { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Specifies the fields to return in a config item summary.")]
        public System.Collections.Generic.List<Oci.OpsiService.Requests.CreateOpsiConfigurationRequest.ConfigItemFieldEnum> ConfigItemField { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            CreateOpsiConfigurationRequest request;

            try
            {
                request = new CreateOpsiConfigurationRequest
                {
                    CreateOpsiConfigurationDetails = CreateOpsiConfigurationDetails,
                    OpcRetryToken = OpcRetryToken,
                    OpcRequestId = OpcRequestId,
                    OpsiConfigField = OpsiConfigField,
                    ConfigItemCustomStatus = ConfigItemCustomStatus,
                    ConfigItemsApplicableContext = ConfigItemsApplicableContext,
                    ConfigItemField = ConfigItemField
                };

                response = client.CreateOpsiConfiguration(request).GetAwaiter().GetResult();
                WriteOutput(response, response.OpsiConfiguration);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private CreateOpsiConfigurationResponse response;
    }
}
