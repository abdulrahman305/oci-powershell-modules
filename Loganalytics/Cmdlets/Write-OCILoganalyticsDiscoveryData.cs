/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20200601
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.LoganalyticsService.Requests;
using Oci.LoganalyticsService.Responses;
using Oci.LoganalyticsService.Models;
using Oci.Common.Model;

namespace Oci.LoganalyticsService.Cmdlets
{
    [Cmdlet("Write", "OCILoganalyticsDiscoveryData")]
    [OutputType(new System.Type[] { typeof(void), typeof(Oci.LoganalyticsService.Responses.UploadDiscoveryDataResponse) })]
    public class WriteOCILoganalyticsDiscoveryData : OCILogAnalyticsCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Logging Analytics namespace used for the request.")]
        public string NamespaceName { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Discovery data", ParameterSetName = FromStreamSet)]
        public System.IO.Stream UploadDiscoveryDataDetails { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Use this parameter to provide the file location from where the input stream to be read. Discovery data", ParameterSetName = FromFileSet)]
        public String UploadDiscoveryDataDetailsFromFile { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Metadata key and value pairs separated by a semicolon. Example k1:v1;k2:v2;k3:v3")]
        public string OpcMetaProperties { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Discovery data type")]
        public System.Nullable<Oci.LoganalyticsService.Requests.UploadDiscoveryDataRequest.DiscoveryDataTypeEnum> DiscoveryDataType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The log group OCID that gets mapped to the logs in the discovery data.")]
        public string LogGroupId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Identifies the type of request payload.")]
        public System.Nullable<Oci.LoganalyticsService.Models.PayloadType> PayloadType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The content type of the log data.")]
        public string ContentType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations. For example, if a resource has been deleted and purged from the system, then a retry of the original creation request might be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is ""100-Continue"" (case-insensitive).")]
        public string Expect { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            UploadDiscoveryDataRequest request;

            if (ParameterSetName.Equals(FromFileSet))
            {
                UploadDiscoveryDataDetails = System.IO.File.OpenRead(GetAbsoluteFilePath(UploadDiscoveryDataDetailsFromFile));
            }
            

            try
            {
                request = new UploadDiscoveryDataRequest
                {
                    NamespaceName = NamespaceName,
                    UploadDiscoveryDataDetails = UploadDiscoveryDataDetails,
                    OpcRequestId = OpcRequestId,
                    OpcMetaProperties = OpcMetaProperties,
                    DiscoveryDataType = DiscoveryDataType,
                    LogGroupId = LogGroupId,
                    PayloadType = PayloadType,
                    ContentType = ContentType,
                    OpcRetryToken = OpcRetryToken,
                    Expect = Expect
                };

                response = client.UploadDiscoveryData(request).GetAwaiter().GetResult();
                WriteOutput(response);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private UploadDiscoveryDataResponse response;
        private const string FromFileSet = "FromFile";
        private const string FromStreamSet = "FromStream";
    }
}
