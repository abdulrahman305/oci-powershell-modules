/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20210224
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.CertificatesService.Requests;
using Oci.CertificatesService.Responses;
using Oci.CertificatesService.Models;
using Oci.Common.Model;

namespace Oci.CertificatesService.Cmdlets
{
    [Cmdlet("Get", "OCICertificatesCertificateBundle")]
    [OutputType(new System.Type[] { typeof(Oci.CertificatesService.Models.CertificateBundle), typeof(Oci.CertificatesService.Responses.GetCertificateBundleResponse) })]
    public class GetOCICertificatesCertificateBundle : OCICertificatesCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the certificate.")]
        public string CertificateId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The version number of the certificate. The default value is 0, which means that this query parameter is ignored.")]
        public System.Nullable<long> VersionNumber { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The name of the certificate. (This might be referred to as the name of the certificate version, as every certificate consists of at least one version.) Names are unique across versions of a given certificate.")]
        public string CertificateVersionName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The rotation state of the certificate version.")]
        public System.Nullable<Oci.CertificatesService.Requests.GetCertificateBundleRequest.StageEnum> Stage { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The type of certificate bundle. By default, the private key fields are not returned. When querying for certificate bundles, to return results with certificate contents, the private key in PEM format, and the private key passphrase, specify the value of this parameter as `CERTIFICATE_CONTENT_WITH_PRIVATE_KEY`.")]
        public System.Nullable<Oci.CertificatesService.Requests.GetCertificateBundleRequest.CertificateBundleTypeEnum> CertificateBundleType { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            GetCertificateBundleRequest request;

            try
            {
                request = new GetCertificateBundleRequest
                {
                    CertificateId = CertificateId,
                    OpcRequestId = OpcRequestId,
                    VersionNumber = VersionNumber,
                    CertificateVersionName = CertificateVersionName,
                    Stage = Stage,
                    CertificateBundleType = CertificateBundleType
                };

                response = client.GetCertificateBundle(request).GetAwaiter().GetResult();
                WriteOutput(response, response.CertificateBundle);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private GetCertificateBundleResponse response;
    }
}
