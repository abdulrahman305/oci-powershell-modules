/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20210527
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.ServicecatalogService.Requests;
using Oci.ServicecatalogService.Responses;
using Oci.ServicecatalogService.Models;
using Oci.Common.Model;

namespace Oci.ServicecatalogService.Cmdlets
{
    [Cmdlet("Get", "OCIServicecatalogApplicationsList")]
    [OutputType(new System.Type[] { typeof(Oci.ServicecatalogService.Models.ApplicationCollection), typeof(Oci.ServicecatalogService.Responses.ListApplicationsResponse) })]
    public class GetOCIServicecatalogApplicationsList : OCIServiceCatalogCmdlet
    {
        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The unique identifier for the compartment.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The unique identifier for the service catalog.")]
        public string ServiceCatalogId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The type of the application in the service catalog.")]
        public string EntityType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"How many records to return. Specify a value greater than zero and less than or equal to 1000. The default is 30.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The value of the `opc-next-page` response header from the previous ""List"" call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Exact match name filter.")]
        public string DisplayName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The unique identifier of the entity associated with service catalog.")]
        public string EntityId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Limit results to just this publisher.")]
        public System.Collections.Generic.List<string> PublisherId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Name of the package type. If multiple package types are provided, then any resource with one or more matching package types will be returned.")]
        public System.Collections.Generic.List<Oci.ServicecatalogService.Models.PackageTypeEnum> PackageType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Name of the pricing type. If multiple pricing types are provided, then any resource with one or more matching pricing models will be returned.")]
        public System.Collections.Generic.List<Oci.ServicecatalogService.Models.PricingTypeEnum> Pricing { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Indicates whether to show only featured resources. If this is set to `false` or is omitted, then all resources will be returned.")]
        public System.Nullable<bool> IsFeatured { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to apply, either `ASC` or `DESC`. Default is `ASC`.")]
        public System.Nullable<Oci.ServicecatalogService.Requests.ListApplicationsRequest.SortOrderEnum> SortOrder { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListApplicationsRequest request;

            try
            {
                request = new ListApplicationsRequest
                {
                    CompartmentId = CompartmentId,
                    ServiceCatalogId = ServiceCatalogId,
                    EntityType = EntityType,
                    OpcRequestId = OpcRequestId,
                    Limit = Limit,
                    Page = Page,
                    DisplayName = DisplayName,
                    EntityId = EntityId,
                    PublisherId = PublisherId,
                    PackageType = PackageType,
                    Pricing = Pricing,
                    IsFeatured = IsFeatured,
                    SortOrder = SortOrder
                };
                IEnumerable<ListApplicationsResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.ApplicationCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListApplicationsResponse> DefaultRequest(ListApplicationsRequest request) => Enumerable.Repeat(client.ListApplications(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListApplicationsResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListApplicationsResponse response;
        private delegate IEnumerable<ListApplicationsResponse> RequestDelegate(ListApplicationsRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
