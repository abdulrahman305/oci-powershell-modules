/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20210630
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.DevopsService.Requests;
using Oci.DevopsService.Responses;
using Oci.DevopsService.Models;
using Oci.Common.Model;

namespace Oci.DevopsService.Cmdlets
{
    [Cmdlet("Get", "OCIDevopsCommitDiff")]
    [OutputType(new System.Type[] { typeof(Oci.DevopsService.Models.DiffResponse), typeof(Oci.DevopsService.Responses.GetCommitDiffResponse) })]
    public class GetOCIDevopsCommitDiff : OCIDevopsCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique repository identifier.")]
        public string RepositoryId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The commit or reference name that represents the newer changes against the base version.")]
        public string TargetVersion { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The commit or reference name to compare changes against. If base version is not provided, the difference goes against an empty tree.")]
        public string BaseVersion { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The target repository identifier")]
        public string TargetRepositoryId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Boolean value to indicate whether to use merge base or most recent revision.")]
        public System.Nullable<bool> IsComparisonFromMergeBase { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a particular request, provide the request ID.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            GetCommitDiffRequest request;

            try
            {
                request = new GetCommitDiffRequest
                {
                    RepositoryId = RepositoryId,
                    TargetVersion = TargetVersion,
                    BaseVersion = BaseVersion,
                    TargetRepositoryId = TargetRepositoryId,
                    IsComparisonFromMergeBase = IsComparisonFromMergeBase,
                    OpcRequestId = OpcRequestId
                };

                response = client.GetCommitDiff(request).GetAwaiter().GetResult();
                WriteOutput(response, response.DiffResponse);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private GetCommitDiffResponse response;
    }
}
