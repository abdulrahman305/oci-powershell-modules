/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20210630
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.DevopsService.Requests;
using Oci.DevopsService.Responses;
using Oci.DevopsService.Models;
using Oci.Common.Model;

namespace Oci.DevopsService.Cmdlets
{
    [Cmdlet("New", "OCIDevopsPullRequestAttachment")]
    [OutputType(new System.Type[] { typeof(Oci.DevopsService.Models.PullRequestAttachment), typeof(Oci.DevopsService.Responses.CreatePullRequestAttachmentResponse) })]
    public class NewOCIDevopsPullRequestAttachment : OCIDevopsCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"unique PullRequest identifier")]
        public string PullRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Content-Disposition response-header field has been proposed as a means for the origin server to suggest a default filename if the user requests that the content is saved to a file.")]
        public string ContentDisposition { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Uploads the content of the attachment.", ParameterSetName = FromStreamSet)]
        public System.IO.Stream CreatePullRequestAttachmentBody { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Use this parameter to provide the file location from where the input stream to be read. Uploads the content of the attachment.", ParameterSetName = FromFileSet)]
        public String CreatePullRequestAttachmentBodyFromFile { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated earlier due to conflicting operations. For example, if a resource has been deleted and purged from the system, then a retry of the original creation request might be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a particular request, provide the request ID.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            CreatePullRequestAttachmentRequest request;

            if (ParameterSetName.Equals(FromFileSet))
            {
                CreatePullRequestAttachmentBody = System.IO.File.OpenRead(GetAbsoluteFilePath(CreatePullRequestAttachmentBodyFromFile));
            }
            

            try
            {
                request = new CreatePullRequestAttachmentRequest
                {
                    PullRequestId = PullRequestId,
                    ContentDisposition = ContentDisposition,
                    CreatePullRequestAttachmentBody = CreatePullRequestAttachmentBody,
                    OpcRetryToken = OpcRetryToken,
                    OpcRequestId = OpcRequestId
                };

                response = client.CreatePullRequestAttachment(request).GetAwaiter().GetResult();
                WriteOutput(response, response.PullRequestAttachment);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private CreatePullRequestAttachmentResponse response;
        private const string FromFileSet = "FromFile";
        private const string FromStreamSet = "FromStream";
    }
}
