/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20240102
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.DblmService.Requests;
using Oci.DblmService.Responses;
using Oci.DblmService.Models;
using Oci.Common.Model;

namespace Oci.DblmService.Cmdlets
{
    [Cmdlet("Get", "OCIDblmVulnerabilityResourcesList")]
    [OutputType(new System.Type[] { typeof(Oci.DblmService.Models.VulnerabilityResourceCollection), typeof(Oci.DblmService.Responses.ListVulnerabilityResourcesResponse) })]
    public class GetOCIDblmVulnerabilityResourcesList : OCIDbLifeCycleManagementCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The required ID of the compartment in which to list resources.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'ASC' or 'DESC'.")]
        public System.Nullable<Oci.DblmService.Models.SortOrder> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.")]
        public System.Nullable<Oci.DblmService.Requests.ListVulnerabilityResourcesRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the entire display name given.")]
        public string DisplayName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources their lifecycleState matches the given lifecycleState.")]
        public System.Nullable<Oci.DblmService.Models.DblmVulnerability.LifecycleStateEnum> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only database that match the given release version.")]
        public string DatabaseRelease { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The id of a CVE.")]
        public string CveId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.")]
        public System.Collections.Generic.List<Oci.DblmService.Models.ResourcesSeverities> SeverityType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Filter by one or more severity types. Possible values are upToDate, patchAvailable")]
        public System.Collections.Generic.List<Oci.DblmService.Requests.ListVulnerabilityResourcesRequest.PatchRecommendationEnum> PatchRecommendation { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListVulnerabilityResourcesRequest request;

            try
            {
                request = new ListVulnerabilityResourcesRequest
                {
                    CompartmentId = CompartmentId,
                    Limit = Limit,
                    Page = Page,
                    SortOrder = SortOrder,
                    SortBy = SortBy,
                    DisplayName = DisplayName,
                    LifecycleState = LifecycleState,
                    DatabaseRelease = DatabaseRelease,
                    CveId = CveId,
                    SeverityType = SeverityType,
                    PatchRecommendation = PatchRecommendation,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListVulnerabilityResourcesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.VulnerabilityResourceCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListVulnerabilityResourcesResponse> DefaultRequest(ListVulnerabilityResourcesRequest request) => Enumerable.Repeat(client.ListVulnerabilityResources(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListVulnerabilityResourcesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListVulnerabilityResourcesResponse response;
        private delegate IEnumerable<ListVulnerabilityResourcesResponse> RequestDelegate(ListVulnerabilityResourcesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
