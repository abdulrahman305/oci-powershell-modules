/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20200831
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.LoggingingestionService.Requests;
using Oci.LoggingingestionService.Responses;
using Oci.LoggingingestionService.Models;
using Oci.Common.Model;

namespace Oci.LoggingingestionService.Cmdlets
{
    [Cmdlet("Write", "OCILoggingingestionLogs")]
    [OutputType(new System.Type[] { typeof(void), typeof(Oci.LoggingingestionService.Responses.PutLogsResponse) })]
    public class WriteOCILoggingingestionLogs : OCILoggingCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"OCID of a log to work with.")]
        public string LogId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The logs to emit.")]
        public PutLogsDetails PutLogsDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Effective timestamp, for when the agent started processing the log segment being sent. An RFC3339-formatted date-time string with milliseconds precision.")]
        public System.Nullable<System.DateTime> TimestampOpcAgentProcessing { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Version of the agent sending the request.")]
        public string OpcAgentVersion { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            PutLogsRequest request;

            try
            {
                request = new PutLogsRequest
                {
                    LogId = LogId,
                    PutLogsDetails = PutLogsDetails,
                    TimestampOpcAgentProcessing = TimestampOpcAgentProcessing,
                    OpcAgentVersion = OpcAgentVersion,
                    OpcRequestId = OpcRequestId
                };

                response = client.PutLogs(request).GetAwaiter().GetResult();
                WriteOutput(response);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private PutLogsResponse response;
    }
}
