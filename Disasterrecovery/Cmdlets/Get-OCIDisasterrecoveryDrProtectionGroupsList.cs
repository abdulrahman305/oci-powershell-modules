/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20220125
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.DisasterrecoveryService.Requests;
using Oci.DisasterrecoveryService.Responses;
using Oci.DisasterrecoveryService.Models;
using Oci.Common.Model;

namespace Oci.DisasterrecoveryService.Cmdlets
{
    [Cmdlet("Get", "OCIDisasterrecoveryDrProtectionGroupsList")]
    [OutputType(new System.Type[] { typeof(Oci.DisasterrecoveryService.Models.DrProtectionGroupCollection), typeof(Oci.DisasterrecoveryService.Responses.ListDrProtectionGroupsResponse) })]
    public class GetOCIDisasterrecoveryDrProtectionGroupsList : OCIDisasterRecoveryCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The ID (OCID) of the compartment in which to list resources.

Example: `ocid1.compartment.oc1..uniqueID`")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only DR protection groups that match the given lifecycle state.")]
        public System.Nullable<Oci.DisasterrecoveryService.Models.DrProtectionGroupLifecycleState> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the DR protection group. Optional query param.

Example: `ocid1.drprotectiongroup.oc1..uniqueID`")]
        public string DrProtectionGroupId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the given display name.

Example: `MyResourceDisplayName`")]
        public string DisplayName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"For list pagination. The maximum number of results per page, or items to return in a paginated ""List"" call. 1 is the minimum, 1000 is the maximum.

For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).

Example: `100`", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"For list pagination. The value of the `opc-next-page` response header from the previous ""List"" call.

For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'asc' or 'desc'.")]
        public System.Nullable<Oci.DisasterrecoveryService.Models.SortOrder> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending. If no value is specified timeCreated is default.

Example: `MyResourceDisplayName`")]
        public System.Nullable<Oci.DisasterrecoveryService.Requests.ListDrProtectionGroupsRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The DR protection group Role.")]
        public System.Nullable<Oci.DisasterrecoveryService.Models.DrProtectionGroupRole> Role { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only DR protection groups that match the given lifecycle sub-state.")]
        public System.Nullable<Oci.DisasterrecoveryService.Models.DrProtectionGroupLifecycleSubState> LifecycleSubState { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListDrProtectionGroupsRequest request;

            try
            {
                request = new ListDrProtectionGroupsRequest
                {
                    CompartmentId = CompartmentId,
                    LifecycleState = LifecycleState,
                    DrProtectionGroupId = DrProtectionGroupId,
                    DisplayName = DisplayName,
                    Limit = Limit,
                    Page = Page,
                    SortOrder = SortOrder,
                    SortBy = SortBy,
                    OpcRequestId = OpcRequestId,
                    Role = Role,
                    LifecycleSubState = LifecycleSubState
                };
                IEnumerable<ListDrProtectionGroupsResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.DrProtectionGroupCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListDrProtectionGroupsResponse> DefaultRequest(ListDrProtectionGroupsRequest request) => Enumerable.Repeat(client.ListDrProtectionGroups(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListDrProtectionGroupsResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListDrProtectionGroupsResponse response;
        private delegate IEnumerable<ListDrProtectionGroupsResponse> RequestDelegate(ListDrProtectionGroupsRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
