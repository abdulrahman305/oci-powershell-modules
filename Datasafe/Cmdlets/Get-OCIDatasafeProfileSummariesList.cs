/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20181201
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.DatasafeService.Requests;
using Oci.DatasafeService.Responses;
using Oci.DatasafeService.Models;
using Oci.Common.Model;

namespace Oci.DatasafeService.Cmdlets
{
    [Cmdlet("Get", "OCIDatasafeProfileSummariesList")]
    [OutputType(new System.Type[] { typeof(Oci.DatasafeService.Models.ProfileSummary), typeof(Oci.DatasafeService.Responses.ListProfileSummariesResponse) })]
    public class GetOCIDatasafeProfileSummariesList : OCIDataSafeCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the user assessment.")]
        public string UserAssessmentId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the specified compartment OCID.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.")]
        public System.Nullable<bool> CompartmentIdInSubtree { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.")]
        public System.Nullable<Oci.DatasafeService.Requests.ListProfileSummariesRequest.AccessLevelEnum> AccessLevel { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only items related to a specific target OCID.")]
        public string TargetId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"For list pagination. The maximum number of items to return per page in a paginated ""List"" call. For details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/en-us/iaas/Content/API/Concepts/usingapi.htm#nine).", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"For list pagination. The page token representing the page at which to start retrieving results. It is usually retrieved from a previous ""List"" call. For details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/en-us/iaas/Content/API/Concepts/usingapi.htm#nine).")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only items that match the specified profile name.")]
        public string ProfileName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the user created profiles.")]
        public System.Nullable<bool> IsUserCreated { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to filter the profiles based on password verification function.")]
        public string PasswordVerificationFunction { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles having user count greater than or equal to the provided value.")]
        public string UserCountGreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles having user count less than the provided value.")]
        public string UserCountLessThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string FailedLoginAttemptsGreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string FailedLoginAttemptsLessThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string SessionsPerUserGreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string SessionsPerUserLessThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string InactiveAccountTimeGreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string InactiveAccountTimeLessThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string PasswordLockTimeGreaterThanOrEqual { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the ""UNLIMITED"" and ""DEFAULT"" values.")]
        public string PasswordLockTimeLessThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. You can specify only one sort order (sortOrder). The default order is targetId ASC.")]
        public System.Nullable<Oci.DatasafeService.Requests.ListProfileSummariesRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either ascending (ASC) or descending (DESC).")]
        public System.Nullable<Oci.DatasafeService.Requests.ListProfileSummariesRequest.SortOrderEnum> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique identifier for the request.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListProfileSummariesRequest request;

            try
            {
                request = new ListProfileSummariesRequest
                {
                    UserAssessmentId = UserAssessmentId,
                    CompartmentId = CompartmentId,
                    CompartmentIdInSubtree = CompartmentIdInSubtree,
                    AccessLevel = AccessLevel,
                    TargetId = TargetId,
                    Limit = Limit,
                    Page = Page,
                    ProfileName = ProfileName,
                    IsUserCreated = IsUserCreated,
                    PasswordVerificationFunction = PasswordVerificationFunction,
                    UserCountGreaterThanOrEqual = UserCountGreaterThanOrEqual,
                    UserCountLessThan = UserCountLessThan,
                    FailedLoginAttemptsGreaterThanOrEqual = FailedLoginAttemptsGreaterThanOrEqual,
                    FailedLoginAttemptsLessThan = FailedLoginAttemptsLessThan,
                    SessionsPerUserGreaterThanOrEqual = SessionsPerUserGreaterThanOrEqual,
                    SessionsPerUserLessThan = SessionsPerUserLessThan,
                    InactiveAccountTimeGreaterThanOrEqual = InactiveAccountTimeGreaterThanOrEqual,
                    InactiveAccountTimeLessThan = InactiveAccountTimeLessThan,
                    PasswordLockTimeGreaterThanOrEqual = PasswordLockTimeGreaterThanOrEqual,
                    PasswordLockTimeLessThan = PasswordLockTimeLessThan,
                    SortBy = SortBy,
                    SortOrder = SortOrder,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListProfileSummariesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.Items, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListProfileSummariesResponse> DefaultRequest(ListProfileSummariesRequest request) => Enumerable.Repeat(client.ListProfileSummaries(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListProfileSummariesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListProfileSummariesResponse response;
        private delegate IEnumerable<ListProfileSummariesResponse> RequestDelegate(ListProfileSummariesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
