/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20230801
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.DelegateaccesscontrolService.Requests;
using Oci.DelegateaccesscontrolService.Responses;
using Oci.DelegateaccesscontrolService.Models;
using Oci.Common.Model;

namespace Oci.DelegateaccesscontrolService.Cmdlets
{
    [Cmdlet("Get", "OCIDelegateaccesscontrolServiceProviderActionsList")]
    [OutputType(new System.Type[] { typeof(Oci.DelegateaccesscontrolService.Models.ServiceProviderActionSummaryCollection), typeof(Oci.DelegateaccesscontrolService.Responses.ListServiceProviderActionsResponse) })]
    public class GetOCIDelegateaccesscontrolServiceProviderActionsList : OCIDelegateAccessControlCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the entire name given.")]
        public string Name { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the given resource type.")]
        public System.Nullable<Oci.DelegateaccesscontrolService.Models.DelegationControlResourceType> ResourceType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the given Service Provider service type.")]
        public System.Collections.Generic.List<Oci.DelegateaccesscontrolService.Models.ServiceProviderServiceType> ServiceProviderServiceType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources whose lifecycleState matches the given Service Provider Action lifecycleState.")]
        public System.Nullable<Oci.DelegateaccesscontrolService.Models.ServiceProviderAction.LifecycleStateEnum> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'asc' or 'desc'.")]
        public System.Nullable<Oci.DelegateaccesscontrolService.Models.SortOrders> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for name is ascending. If no value is specified, default is timeCreated.")]
        public System.Nullable<Oci.DelegateaccesscontrolService.Requests.ListServiceProviderActionsRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListServiceProviderActionsRequest request;

            try
            {
                request = new ListServiceProviderActionsRequest
                {
                    CompartmentId = CompartmentId,
                    Name = Name,
                    ResourceType = ResourceType,
                    ServiceProviderServiceType = ServiceProviderServiceType,
                    LifecycleState = LifecycleState,
                    Limit = Limit,
                    Page = Page,
                    SortOrder = SortOrder,
                    SortBy = SortBy,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListServiceProviderActionsResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.ServiceProviderActionSummaryCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListServiceProviderActionsResponse> DefaultRequest(ListServiceProviderActionsRequest request) => Enumerable.Repeat(client.ListServiceProviderActions(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListServiceProviderActionsResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListServiceProviderActionsResponse response;
        private delegate IEnumerable<ListServiceProviderActionsResponse> RequestDelegate(ListServiceProviderActionsRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
