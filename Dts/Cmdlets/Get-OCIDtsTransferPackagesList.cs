/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 1.0.017
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.DtsService.Requests;
using Oci.DtsService.Responses;
using Oci.DtsService.Models;
using Oci.Common.Model;

namespace Oci.DtsService.Cmdlets
{
    [Cmdlet("Get", "OCIDtsTransferPackagesList")]
    [OutputType(new System.Type[] { typeof(Oci.DtsService.Models.MultipleTransferPackages), typeof(Oci.DtsService.Responses.ListTransferPackagesResponse) })]
    public class GetOCIDtsTransferPackagesList : OCITransferPackageCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"ID of the Transfer Job")]
        public string Id { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"filtering by lifecycleState")]
        public System.Nullable<Oci.DtsService.Requests.ListTransferPackagesRequest.LifecycleStateEnum> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"filtering by displayName")]
        public string DisplayName { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListTransferPackagesRequest request;

            try
            {
                request = new ListTransferPackagesRequest
                {
                    Id = Id,
                    LifecycleState = LifecycleState,
                    DisplayName = DisplayName
                };

                response = client.ListTransferPackages(request).GetAwaiter().GetResult();
                WriteOutput(response, response.MultipleTransferPackages);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private ListTransferPackagesResponse response;
    }
}
