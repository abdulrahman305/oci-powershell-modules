/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20210215
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.VulnerabilityscanningService.Requests;
using Oci.VulnerabilityscanningService.Responses;
using Oci.VulnerabilityscanningService.Models;
using Oci.Common.Model;

namespace Oci.VulnerabilityscanningService.Cmdlets
{
    [Cmdlet("Get", "OCIVulnerabilityscanningVulnerabilitiesList")]
    [OutputType(new System.Type[] { typeof(Oci.VulnerabilityscanningService.Models.VulnerabilitySummaryCollection), typeof(Oci.VulnerabilityscanningService.Responses.ListVulnerabilitiesResponse) })]
    public class GetOCIVulnerabilityscanningVulnerabilitiesList : OCIVulnerabilityScanningCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The ID of the compartment in which to list resources.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that have a severity that matches the given severity")]
        public System.Nullable<Oci.VulnerabilityscanningService.Models.ScanResultProblemSeverity> Severity { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only resources that match the entire name given.")]
        public string Name { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Parameter to filter the vulnerability type's unique identifier. For CVE, this is the MITRE CVE ID")]
        public string VulnerabilityReference { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to filter vulnerabilities based on its type. Only one value can be provided.")]
        public System.Nullable<Oci.VulnerabilityscanningService.Models.VulnerabilityType> VulnerabilityType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use, either 'ASC' or 'DESC'.")]
        public System.Nullable<Oci.VulnerabilityscanningService.Models.SortOrder> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field to sort by. Only one sort order may be provided. Default order for 'name' is Ascending. Default order for other values is descending. If no value is specified name is default.")]
        public System.Nullable<Oci.VulnerabilityscanningService.Requests.ListVulnerabilitiesRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListVulnerabilitiesRequest request;

            try
            {
                request = new ListVulnerabilitiesRequest
                {
                    CompartmentId = CompartmentId,
                    Limit = Limit,
                    Page = Page,
                    Severity = Severity,
                    Name = Name,
                    VulnerabilityReference = VulnerabilityReference,
                    VulnerabilityType = VulnerabilityType,
                    SortOrder = SortOrder,
                    SortBy = SortBy,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListVulnerabilitiesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.VulnerabilitySummaryCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListVulnerabilitiesResponse> DefaultRequest(ListVulnerabilitiesRequest request) => Enumerable.Repeat(client.ListVulnerabilities(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListVulnerabilitiesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListVulnerabilitiesResponse response;
        private delegate IEnumerable<ListVulnerabilitiesResponse> RequestDelegate(ListVulnerabilitiesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
