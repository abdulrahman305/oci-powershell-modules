/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20210501
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.OsubsubscriptionService.Requests;
using Oci.OsubsubscriptionService.Responses;
using Oci.OsubsubscriptionService.Models;
using Oci.Common.Model;

namespace Oci.OsubsubscriptionService.Cmdlets
{
    [Cmdlet("Get", "OCIOsubsubscriptionCommitment")]
    [OutputType(new System.Type[] { typeof(Oci.OsubsubscriptionService.Models.CommitmentDetail), typeof(Oci.OsubsubscriptionService.Responses.GetCommitmentResponse) })]
    public class GetOCIOsubsubscriptionCommitment : OCICommitmentCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Commitment Id")]
        public string CommitmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"This header is meant to be used only for internal purposes and will be ignored on any public request. The purpose of this header is to help on Gateway to API calls identification.")]
        public string XOneGatewaySubscriptionId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCI home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.")]
        public string XOneOriginRegion { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            GetCommitmentRequest request;

            try
            {
                request = new GetCommitmentRequest
                {
                    CommitmentId = CommitmentId,
                    OpcRequestId = OpcRequestId,
                    XOneGatewaySubscriptionId = XOneGatewaySubscriptionId,
                    XOneOriginRegion = XOneOriginRegion
                };

                response = client.GetCommitment(request).GetAwaiter().GetResult();
                WriteOutput(response, response.CommitmentDetail);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private GetCommitmentResponse response;
    }
}
