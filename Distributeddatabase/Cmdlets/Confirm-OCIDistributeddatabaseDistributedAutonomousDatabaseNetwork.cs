/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20250101
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.DistributeddatabaseService.Requests;
using Oci.DistributeddatabaseService.Responses;
using Oci.DistributeddatabaseService.Models;
using Oci.Common.Model;

namespace Oci.DistributeddatabaseService.Cmdlets
{
    [Cmdlet("Confirm", "OCIDistributeddatabaseDistributedAutonomousDatabaseNetwork")]
    [OutputType(new System.Type[] { typeof(Oci.PSModules.Common.Cmdlets.WorkRequest), typeof(Oci.DistributeddatabaseService.Responses.ValidateDistributedAutonomousDatabaseNetworkResponse) })]
    public class ConfirmOCIDistributeddatabaseDistributedAutonomousDatabaseNetwork : OCIDistributedAutonomousDbServiceCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Globally distributed autonomous database identifier")]
        public string DistributedAutonomousDatabaseId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Determines the surrogates check. Default is true.")]
        public System.Nullable<bool> IsSurrogate { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Specify the name of shard or catalog.")]
        public string ResourceName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The shardGroup name example ShardGroupA, ShardGroupB.")]
        public string ShardGroup { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.")]
        public string IfMatch { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations. For example, if a resource has been deleted and purged from the system, then a retry of the original creation request might be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ValidateDistributedAutonomousDatabaseNetworkRequest request;

            try
            {
                request = new ValidateDistributedAutonomousDatabaseNetworkRequest
                {
                    DistributedAutonomousDatabaseId = DistributedAutonomousDatabaseId,
                    IsSurrogate = IsSurrogate,
                    ResourceName = ResourceName,
                    ShardGroup = ShardGroup,
                    IfMatch = IfMatch,
                    OpcRetryToken = OpcRetryToken,
                    OpcRequestId = OpcRequestId
                };

                response = client.ValidateDistributedAutonomousDatabaseNetwork(request).GetAwaiter().GetResult();
                WriteOutput(response, CreateWorkRequestObject(response.OpcWorkRequestId));
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private ValidateDistributedAutonomousDatabaseNetworkResponse response;
    }
}
