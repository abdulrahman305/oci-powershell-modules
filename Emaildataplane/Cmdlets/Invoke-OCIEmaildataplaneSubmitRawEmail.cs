/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20220926
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.EmaildataplaneService.Requests;
using Oci.EmaildataplaneService.Responses;
using Oci.EmaildataplaneService.Models;
using Oci.Common.Model;

namespace Oci.EmaildataplaneService.Cmdlets
{
    [Cmdlet("Invoke", "OCIEmaildataplaneSubmitRawEmail")]
    [OutputType(new System.Type[] { typeof(Oci.EmaildataplaneService.Models.EmailRawSubmittedResponse), typeof(Oci.EmaildataplaneService.Responses.SubmitRawEmailResponse) })]
    public class InvokeOCIEmaildataplaneSubmitRawEmail : OCIEmailDPCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The media type of the body.")]
        public System.Nullable<Oci.EmaildataplaneService.Requests.SubmitRawEmailRequest.ContentTypeEnum> ContentType { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the approved sender resource.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The envelope and the header from email address, that is sending the email. Email address must be an approved sender.")]
        public string Sender { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The destination for the email, all recipients including to, cc and bcc addresses.")]
        public System.Collections.Generic.List<string> Recipients { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"This should be formatted in valid MIME format. Message can include attachments. MIME libraries should be used to convert the content into the appropriate format.", ParameterSetName = FromStreamSet)]
        public System.IO.Stream RawMessage { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Use this parameter to provide the file location from where the input stream to be read. This should be formatted in valid MIME format. Message can include attachments. MIME libraries should be used to convert the content into the appropriate format.", ParameterSetName = FromFileSet)]
        public String RawMessageFromFile { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The request ID for tracing from the system")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The content length of the body.")]
        public System.Nullable<long> ContentLength { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            SubmitRawEmailRequest request;

            if (ParameterSetName.Equals(FromFileSet))
            {
                RawMessage = System.IO.File.OpenRead(GetAbsoluteFilePath(RawMessageFromFile));
            }
            

            try
            {
                request = new SubmitRawEmailRequest
                {
                    ContentType = ContentType,
                    CompartmentId = CompartmentId,
                    Sender = Sender,
                    Recipients = Recipients,
                    RawMessage = RawMessage,
                    OpcRequestId = OpcRequestId,
                    ContentLength = ContentLength
                };

                response = client.SubmitRawEmail(request).GetAwaiter().GetResult();
                WriteOutput(response, response.EmailRawSubmittedResponse);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private SubmitRawEmailResponse response;
        private const string FromFileSet = "FromFile";
        private const string FromStreamSet = "FromStream";
    }
}
