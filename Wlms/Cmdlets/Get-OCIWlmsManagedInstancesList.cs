/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20241101
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.WlmsService.Requests;
using Oci.WlmsService.Responses;
using Oci.WlmsService.Models;
using Oci.Common.Model;

namespace Oci.WlmsService.Cmdlets
{
    [Cmdlet("Get", "OCIWlmsManagedInstancesList")]
    [OutputType(new System.Type[] { typeof(Oci.WlmsService.Models.ManagedInstanceCollection), typeof(Oci.WlmsService.Responses.ListManagedInstancesResponse) })]
    public class GetOCIWlmsManagedInstancesList : OCIWeblogicManagementServiceCmdlet
    {
        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The display name.")]
        public string DisplayName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the instance.")]
        public string Id { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The plugin status of the managed instance.")]
        public System.Nullable<Oci.WlmsService.Requests.ListManagedInstancesRequest.PluginStatusEnum> PluginStatus { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations. For example, if a resource has been deleted and purged from the system, then a retry of the original creation request might be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page token that represents the page at which to start retrieving results. The token is usually retrieved from a previous List call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order is either 'ASC' or 'DESC'.")]
        public System.Nullable<Oci.WlmsService.Requests.ListManagedInstancesRequest.SortOrderEnum> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The field by which to sort the resource. Only one sort order may be provided. Default order for _timeCreated_ is **descending**. Default order for _displayName_ is **ascending**. If no value is specified, _timeCreated_ is default.")]
        public System.Nullable<Oci.WlmsService.Requests.ListManagedInstancesRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListManagedInstancesRequest request;

            try
            {
                request = new ListManagedInstancesRequest
                {
                    CompartmentId = CompartmentId,
                    DisplayName = DisplayName,
                    Id = Id,
                    PluginStatus = PluginStatus,
                    OpcRequestId = OpcRequestId,
                    OpcRetryToken = OpcRetryToken,
                    Limit = Limit,
                    Page = Page,
                    SortOrder = SortOrder,
                    SortBy = SortBy
                };
                IEnumerable<ListManagedInstancesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.ManagedInstanceCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListManagedInstancesResponse> DefaultRequest(ListManagedInstancesRequest request) => Enumerable.Repeat(client.ListManagedInstances(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListManagedInstancesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListManagedInstancesResponse response;
        private delegate IEnumerable<ListManagedInstancesResponse> RequestDelegate(ListManagedInstancesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
