/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20181231
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.CimsService.Requests;
using Oci.CimsService.Responses;
using Oci.CimsService.Models;
using Oci.Common.Model;

namespace Oci.CimsService.Cmdlets
{
    [Cmdlet("Get", "OCICimsIncident")]
    [OutputType(new System.Type[] { typeof(Oci.CimsService.Models.Incident), typeof(Oci.CimsService.Responses.GetIncidentResponse) })]
    public class GetOCICimsIncident : OCIIncidentCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique identifier for the support ticket.")]
        public string IncidentKey { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the tenancy.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Customer Support Identifier (CSI) number associated with the support account. The CSI is optional for all support request types.")]
        public string Csi { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"User OCID for Oracle Identity Cloud Service (IDCS) users who also have a federated Oracle Cloud Infrastructure account. User OCID is mandatory for OCI Users and optional for Multicloud users.")]
        public string Ocid { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The region of the tenancy.")]
        public string Homeregion { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The kind of support request.")]
        public string Problemtype { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Token type that determine which cloud provider the request come from.")]
        public string Bearertokentype { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Token that provided by multi cloud provider, which help to validate the email.")]
        public string Bearertoken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"IdToken that provided by multi cloud provider, which help to validate the email.")]
        public string Idtoken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of identity domain. DomainID is mandatory if the user is part of Non Default Identity domain.")]
        public string Domainid { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            GetIncidentRequest request;

            try
            {
                request = new GetIncidentRequest
                {
                    IncidentKey = IncidentKey,
                    CompartmentId = CompartmentId,
                    OpcRequestId = OpcRequestId,
                    Csi = Csi,
                    Ocid = Ocid,
                    Homeregion = Homeregion,
                    Problemtype = Problemtype,
                    Bearertokentype = Bearertokentype,
                    Bearertoken = Bearertoken,
                    Idtoken = Idtoken,
                    Domainid = Domainid
                };

                response = client.GetIncident(request).GetAwaiter().GetResult();
                WriteOutput(response, response.Incident);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private GetIncidentResponse response;
    }
}
