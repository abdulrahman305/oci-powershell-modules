/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20201101
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.DatabasemanagementService.Requests;
using Oci.DatabasemanagementService.Responses;
using Oci.DatabasemanagementService.Models;
using Oci.Common.Model;

namespace Oci.DatabasemanagementService.Cmdlets
{
    [Cmdlet("Get", "OCIDatabasemanagementSqlPlanBaselinesList")]
    [OutputType(new System.Type[] { typeof(Oci.DatabasemanagementService.Models.SqlPlanBaselineCollection), typeof(Oci.DatabasemanagementService.Responses.ListSqlPlanBaselinesResponse) })]
    public class GetOCIDatabasemanagementSqlPlanBaselinesList : OCIDbManagementCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Managed Database.")]
        public string ManagedDatabaseId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that match the plan name.")]
        public string PlanName { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return all the SQL plan baselines for the specified SQL handle.")]
        public string SqlHandle { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the '%' symbol as a wildcard.")]
        public string SqlText { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that are either enabled or not enabled. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsEnabled { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that are either accepted or not accepted. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsAccepted { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that were either reproduced or not reproduced by the optimizer. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsReproduced { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that are either fixed or not fixed. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsFixed { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that are either adaptive or not adaptive. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsAdaptive { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return all the SQL plan baselines that match the origin.")]
        public System.Nullable<Oci.DatabasemanagementService.Models.SqlPlanBaselineOrigin> Origin { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page token representing the page from where the next set of paginated results are retrieved. This is usually retrieved from a previous list call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of records returned in the paginated response.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The option to sort the SQL plan baseline summary data.")]
        public System.Nullable<Oci.DatabasemanagementService.Requests.ListSqlPlanBaselinesRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The option to sort information in ascending ('ASC') or descending ('DESC') order. Descending order is the default order.")]
        public System.Nullable<Oci.DatabasemanagementService.Models.SortOrders> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that are either auto-purged or not auto-purged. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsAutoPurged { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines whose last execution time is after the specified value. By default, all SQL plan baselines are returned.")]
        public System.Nullable<System.DateTime> TimeLastExecutedGreaterThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines whose last execution time is before the specified value. By default, all SQL plan baselines are returned.")]
        public System.Nullable<System.DateTime> TimeLastExecutedLessThan { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only SQL plan baselines that are not executed till now. By default, all SQL plan baselines are returned.")]
        public System.Nullable<bool> IsNeverExecuted { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the Named Credential.")]
        public string OpcNamedCredentialId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListSqlPlanBaselinesRequest request;

            try
            {
                request = new ListSqlPlanBaselinesRequest
                {
                    ManagedDatabaseId = ManagedDatabaseId,
                    PlanName = PlanName,
                    SqlHandle = SqlHandle,
                    SqlText = SqlText,
                    IsEnabled = IsEnabled,
                    IsAccepted = IsAccepted,
                    IsReproduced = IsReproduced,
                    IsFixed = IsFixed,
                    IsAdaptive = IsAdaptive,
                    Origin = Origin,
                    Page = Page,
                    Limit = Limit,
                    SortBy = SortBy,
                    SortOrder = SortOrder,
                    IsAutoPurged = IsAutoPurged,
                    TimeLastExecutedGreaterThan = TimeLastExecutedGreaterThan,
                    TimeLastExecutedLessThan = TimeLastExecutedLessThan,
                    IsNeverExecuted = IsNeverExecuted,
                    OpcRequestId = OpcRequestId,
                    OpcNamedCredentialId = OpcNamedCredentialId
                };
                IEnumerable<ListSqlPlanBaselinesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.SqlPlanBaselineCollection, true);
                }
                if(!ParameterSetName.Equals(AllPageSet) && !ParameterSetName.Equals(LimitSet) && response.OpcNextPage != null)
                {
                    WriteWarning("This operation supports pagination and not all resources were returned. Re-run using the -All option to auto paginate and list all resources.");
                }
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListSqlPlanBaselinesResponse> DefaultRequest(ListSqlPlanBaselinesRequest request) => Enumerable.Repeat(client.ListSqlPlanBaselines(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListSqlPlanBaselinesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListSqlPlanBaselinesResponse response;
        private delegate IEnumerable<ListSqlPlanBaselinesResponse> RequestDelegate(ListSqlPlanBaselinesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
