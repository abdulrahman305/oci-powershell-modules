/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20190506
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.OdaService.Requests;
using Oci.OdaService.Responses;
using Oci.OdaService.Models;
using Oci.Common.Model;

namespace Oci.OdaService.Cmdlets
{
    [Cmdlet("New", "OCIOdaChannel")]
    [OutputType(new System.Type[] { typeof(Oci.OdaService.Models.CreateChannelResult), typeof(Oci.OdaService.Responses.CreateChannelResponse) })]
    public class NewOCIOdaChannel : OCIManagementCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Digital Assistant instance identifier.")]
        public string OdaInstanceId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Property values for creating the new Channel. This parameter also accepts subtypes <Oci.OdaService.Models.CreateMSTeamsChannelDetails>, <Oci.OdaService.Models.CreateWebChannelDetails>, <Oci.OdaService.Models.CreateFacebookChannelDetails>, <Oci.OdaService.Models.CreateApplicationChannelDetails>, <Oci.OdaService.Models.CreateServiceCloudChannelDetails>, <Oci.OdaService.Models.CreateSlackChannelDetails>, <Oci.OdaService.Models.CreateOsvcChannelDetails>, <Oci.OdaService.Models.CreateAppEventChannelDetails>, <Oci.OdaService.Models.CreateOSSChannelDetails>, <Oci.OdaService.Models.CreateCortanaChannelDetails>, <Oci.OdaService.Models.CreateAndroidChannelDetails>, <Oci.OdaService.Models.CreateTwilioChannelDetails>, <Oci.OdaService.Models.CreateWebhookChannelDetails>, <Oci.OdaService.Models.CreateIosChannelDetails> of type <Oci.OdaService.Models.CreateChannelDetails>.")]
        public CreateChannelDetails CreateChannelDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing. This value is included in the opc-request-id response header.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so that you can retry the request if there's a timeout or server error without the risk of executing that same action again.

Retry tokens expire after 24 hours, but they can become invalid before then if there are conflicting operations. For example, if an instance was deleted and purged from the system, then the service might reject a retry of the original creation request.")]
        public string OpcRetryToken { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            CreateChannelRequest request;

            try
            {
                request = new CreateChannelRequest
                {
                    OdaInstanceId = OdaInstanceId,
                    CreateChannelDetails = CreateChannelDetails,
                    OpcRequestId = OpcRequestId,
                    OpcRetryToken = OpcRetryToken
                };

                response = client.CreateChannel(request).GetAwaiter().GetResult();
                WriteOutput(response, response.CreateChannelResult);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private CreateChannelResponse response;
    }
}
